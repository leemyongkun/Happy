apply plugin: 'java'
apply plugin: 'eclipse-wtp' 
apply plugin: 'war'
 
compileJava {
   sourceCompatibility = 1.8
   options.encoding = 'UTF-8'
}
repositories {
	maven {
		url 'http://repo.spring.io/plugins-release'
	}
}
	
eclipse {
  wtp {
    facet {
       facet name: 'jst.web', version: '3.0'
    }
  }
}
repositories {
   mavenCentral()
}

 def version = [
		spring: '4.0.7.RELEASE'
		, springSecurity: '3.2.5.RELEASE'
		
		, junit: '4.11'
		, servletApi: '3.0.1'
		, jstl: '1.2'
		, slf4j: '1.7.6'
		//, mockito: '1.9.0'
		, cglib: '2.2.2'
		//, logback: '1.0.6'
		, aspect: '1.6.6'
		, inject: '1'
		, jspApi: '2.1'
		
		, commonsDbcp: '1.4'
		, mysqlConnector: '5.1.6'
		, mybatis: '3.2.2'
		, mybatisSpring: '1.2.0'
		, tiles: '3.0.5'
		, quartz: '2.2.1'
		, commonsFileupload: '1.3.1'
		, commonsIo: '2.4'
		, log4jdbc: '0.2.7'
		, jackson: '2.4.2'
		
		, social: '1.0.2.RELEASE'
		, httpcomponents:'4.3.5'
	]
	
	
dependencies {
		compile "org.springframework:spring-context:${version.spring}"
		compile "org.springframework:spring-webmvc:${version.spring}"
		compile "org.springframework:spring-jdbc:${version.spring}"
		compile "org.springframework:spring-context-support:${version.spring}"
		compile "org.springframework:spring-tx:${version.spring}"
		compile "org.springframework:spring-aop:${version.spring}"
			
		compile "org.springframework.security:spring-security-core:${version.springSecurity}"
		compile "org.springframework.security:spring-security-config:${version.springSecurity}"
		compile "org.springframework.security:spring-security-web:${version.springSecurity}"
		compile "org.springframework.security:spring-security-taglibs:${version.springSecurity}"
		
		compile "org.aspectj:aspectjrt:${version.aspect}"
		compile "org.slf4j:slf4j-api:${version.slf4j}"
		compile "org.slf4j:jcl-over-slf4j:${version.slf4j}"
		compile "org.slf4j:slf4j-log4j12:${version.slf4j}"
		compile "log4j:log4j:1.2.15"
		compile "javax.inject:javax.inject:${version.inject}"
		compile "javax.servlet:javax.servlet-api:${version.servletApi}"
		compile "javax.servlet.jsp:jsp-api:${version.jspApi}"
		compile "javax.servlet:jstl:${version.jstl}"
		compile "junit:junit:${version.junit}"
		
		compile "commons-dbcp:commons-dbcp:${version.commonsDbcp}"
		
		/* myBatis */
		compile "org.mybatis:mybatis:${version.mybatis}"
		compile "org.mybatis:mybatis-spring:${version.mybatisSpring}"
		
		/* MySQL Connector : ���� ����� DBMS connector�� ��ü�Ѵ�. */
		compile "mysql:mysql-connector-java:${version.mysqlConnector}"
		
		/* Tiles Template Component */
		compile "org.apache.tiles:tiles-extras:${version.tiles}"
		compile "org.apache.tiles:tiles-jsp:${version.tiles}"
		compile "org.apache.tiles:tiles-servlet:${version.tiles}"
		compile "org.apache.tiles:tiles-template:${version.tiles}"
		compile "org.apache.tiles:tiles-el:${version.tiles}"
		
		/* Quartz Scheduler*/
		compile "org.quartz-scheduler:quartz:${version.quartz}"
		
		compile "commons-fileupload:commons-fileupload:${version.commonsFileupload}"
		compile "commons-io:commons-io:${version.commonsIo}"
		
		compile "org.lazyluke:log4jdbc-remix:${version.log4jdbc}"
		
		/*JSON Message Converting ���̺귯��*/
		compile "com.fasterxml.jackson.core:jackson-databind:${version.jackson}"
		
		/*AOP�� �ʿ��� ��� - spring-aop�� ���Ҿ� ����ϴ� dependency��� �ѹ濡 �� ������. (aspectj / aspectweaver ��*/
		compile "org.springframework:spring-aspects:${version.spring}"
		
		
	compile "org.springframework.social:spring-social-core:${version.social}"
	compile "org.springframework.social:spring-social-web:${version.social}"
	compile "org.springframework.social:spring-social-facebook:${version.social}"
	compile "org.springframework.social:spring-social-facebook:${version.social}"
	compile "org.apache.httpcomponents:httpclient:${version.httpcomponents}"
		
	}

	// source compiling level (jdk version)
	sourceCompatibility = 1.8
	
 	[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
	
	
	
	sourceSets {
		main {
			java {
				srcDir "src/main/java"
			}
			resources {
				srcDir "src/main/resources"
				exclude "**"
			}
			output.classesDir = "build/classes"
			output.resourcesDir = "build/classes"
		}
		test {
			java {
				srcDir "src/test/java"
			}
			resources {
				srcDir "src/test/resources"
				include "**/*.java"
			}
			output.classesDir = "build/test-classes"
			output.resourcesDir = "build/test-classes"
		}
	}
	
	task createSourceDirs << {
		println ""
		println "***** Creating source directories on [" + project.name + "] projects. *****"

		if (project.name != 'CommonUtils') webAppDir.mkdirs()
		
		sourceSets*.java.srcDirs*.each {
			println "    ---> " + it
			it.mkdirs()
		}
		sourceSets*.resources.srcDirs*.each {
			println "    ---> " + it
			it.mkdirs()
		}
	}
	
	eclipseClasspath.dependsOn(createSourceDirs)
 